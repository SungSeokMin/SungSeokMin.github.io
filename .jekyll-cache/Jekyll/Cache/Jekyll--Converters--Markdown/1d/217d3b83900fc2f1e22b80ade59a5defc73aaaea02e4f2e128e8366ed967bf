I"b<blockquote>
  <h2 id="react에서-typescript-사용하기--redux">React에서 TypeScript 사용하기 + Redux</h2>
</blockquote>

<h3 id="todolist">TodoList</h3>

<h4 id="파일-구조">파일 구조</h4>

<p><img width="265" alt="스크린샷 2021-02-20 오후 2 44 50" src="https://user-images.githubusercontent.com/72539723/108585206-893ba280-738a-11eb-909b-9a32937333b6.png" /></p>

<h3 id="redux-setting">Redux Setting</h3>

<h4 id="indexts">index.ts</h4>

<p>✔️ 궁금해</p>

<ul>
  <li>export * from ‘path’ ?
    <ul>
      <li>from 뒤에 오는 path에서 export된 것들을 가져와서 내보내준다는 의미!</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export {default} from './reducer';
export * from './actions';
export * from './types';
</code></pre></div></div>

<h4 id="actionsts">actions.ts</h4>

<p>✔️ 궁금해</p>

<ul>
  <li>
    <p>typesafe-actions ?</p>

    <ul>
      <li>action, reducer를 보다 편한히 사용하기 위한 라이브러리</li>
    </ul>
  </li>
  <li>
    <p>타입을 초기화 할 때 as const를 넣는 이유 ?</p>
    <ul>
      <li>action 함수를 생성할 때 생성될 함수의 타입을 명확히 하기 위해서 !</li>
      <li>as const를 작성한 경우
        <ul>
          <li><img width="302" alt="스크린샷 2021-02-20 오후 2 58 43" src="https://user-images.githubusercontent.com/72539723/108585488-22b78400-738c-11eb-9fa2-5985f60e38d8.png" /></li>
        </ul>
      </li>
      <li>as const를 작성하지 않은 경우
        <ul>
          <li><img width="305" alt="스크린샷 2021-02-20 오후 2 58 15" src="https://user-images.githubusercontent.com/72539723/108585462-129fa480-738c-11eb-9079-01b6f4b8c9aa.png" /> <br /></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import { deprecated } from 'typesafe-actions';
const { createStandardAction } = deprecated;

export const ADD_TODO = 'todos/ADD_TODO' as const;
export const TOGGLE_TODO = 'todos/TOGGLE_TODO';
export const REMOVE_TODO = 'todos/REMOVE_TODO';

// 게시글 번호를 위해 변수 생성
let nextId = 1;

// 기존 방식의 action 함수 생성
export const addTodo = (text: string) =&gt; ({
  type: ADD_TODO,
  payload: {
    id: nextId++,
    text,
  },
});

❗️ 조심 해야 하는 부분 ❗️
매개변수로 받아오는 값이랑 payload르 이용해 내보내주는 값이 다른 경우에는 createStandardAction을 사용하는 것이 아니라 createAction 메소드를 사용해야 한다.

// typesafe-actions 라이브러리를 이용한 action 함수 생성
export const toggleTodo = createStandardAction(TOGGLE_TODO)&lt;number&gt;();
export const removeTodo = createStandardAction(REMOVE_TODO)&lt;number&gt;();
</code></pre></div></div>

<h4 id="typests">types.ts</h4>

<p>TypeScript를 사용하기 때문에 타입을 지정 해주기 위한 파일</p>

<p>✔️ 궁금해</p>

<ul>
  <li>
    <p>ActionType ?</p>

    <ul>
      <li>기존의 방식대로 작성을 하면 aciont 함수를 구현한 수 만큼 ReturnType을 이용해 다 적어줘야 했지만 한 번에 하는 방법이 있다</li>
      <li>ActionType을 사용한 경우 (둘 다 같은 결과가 나온다.)
        <ul>
          <li><img width="623" alt="스크린샷 2021-02-20 오후 3 19 21" src="https://user-images.githubusercontent.com/72539723/108585976-02d58f80-738f-11eb-94a7-1dd0f4fc9530.png" /></li>
        </ul>
      </li>
      <li>ActionType을 사용하지 않은 경우
        <ul>
          <li><img width="630" alt="스크린샷 2021-02-20 오후 3 18 41" src="https://user-images.githubusercontent.com/72539723/108585966-edf8fc00-738e-11eb-8c5c-dd819b6fafb2.png" /></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>Todo[] ?</p>
    <ul>
      <li>Todo라는 타입을 배열로 하겠다는 의미 !</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import {ActionType} from 'typesafe-actions;
import * as actions from './actions';

export type TodoAction = ActionType&lt;typeof actions&gt;;

export type Todo = {
  id: number;
  text: string;
  done: boolean;
};

export type TodoState = Todo[];
</code></pre></div></div>

<h4 id="reducerts">reducer.ts</h4>

<p>✔️ 궁금해</p>

<ul>
  <li>createReducer ?
    <ul>
      <li>보다 간편한 문법으로 reducer를 작성하기 위해 사용한 메소드</li>
    </ul>
  </li>
  <li>☀️ 어떤 문법을 사용하는 자기 마음 ☀️</li>
  <li>기존 redux reducer 방식
    <ul>
      <li><img width="623" alt="스크린샷 2021-02-20 오후 3 41 14" src="https://user-images.githubusercontent.com/72539723/108586459-13d3d000-7392-11eb-9185-5848c4247c0e.png" /></li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import { createReducer } from 'typesafe-actions;
import { ADD_TODO, REMOVE_TODO, TOGGLE_TODO } from './actions';
import { TodoAction, TodoState } from './types';

// types에서 지정한 타입을 initalState의 타입으로 설정
const initialState: TodoState = [];

const todos = createReducer&lt;TodoState, TodoAction&gt;(initialState, {
  [ADD_TODO] : (state, action) =&gt;
    state.concat({
      ...action.payload,
      done: false
    }),
  [TOGGLE_TODO]: (state, action) =&gt;
    state.map((todo) =&gt; (todo.id === action.payload ? { ...todo, done: !todo.done} : todo)),
  [REMOVE_TODO]: (state, action) =&gt;
    state.filter((todo) =&gt; todo.id !== action.payload),
})

export default todos;
</code></pre></div></div>

<h4 id="modules--indexjs">modules &gt; index.js</h4>

<p>rootReducer 생성</p>

<p>✔️ 궁금해</p>

<ul>
  <li>combineReducers ?
    <ul>
      <li>여러개의 reducer를 combine(결합)시키기 위해 사용되는 메소드</li>
    </ul>
  </li>
  <li>왜 export를 두 번 하지 ?
    <ul>
      <li>combine한 rootReducer와 그 reducer의 Type을 내보낸다!</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import { combineReducers } from 'redux';
import todos from './todos';

const rootReducer = combineReducers({
  todos,
})

export default rootReducer;
export RootState = ReturnType&lt;typeof rootReducer&gt;
</code></pre></div></div>

<hr />

<blockquote>
  <h2 id="compoent-setting">Compoent Setting</h2>
</blockquote>
:ET