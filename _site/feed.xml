<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://sungseokmin.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://sungseokmin.github.io/" rel="alternate" type="text/html" /><updated>2021-02-04T22:33:26+09:00</updated><id>https://sungseokmin.github.io/feed.xml</id><title type="html">Happy Developer</title><subtitle>Happy Blog</subtitle><author><name>SungSeokMin</name><email>jkl154527@gmail.com</email></author><entry><title type="html">Grid</title><link href="https://sungseokmin.github.io/frontend/grid/Grid/" rel="alternate" type="text/html" title="Grid" /><published>2021-02-03T00:00:00+09:00</published><updated>2021-02-03T00:00:00+09:00</updated><id>https://sungseokmin.github.io/frontend/grid/Grid</id><content type="html" xml:base="https://sungseokmin.github.io/frontend/grid/Grid/">&lt;blockquote&gt;
  &lt;h3 id=&quot;grid&quot;&gt;Grid&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;gird-template-columns-물론-rows도-있다&quot;&gt;gird-template-columns (물론 rows도 있다!!)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;한 행에 2개씩 표현, 첫 번째는 40%의 비율, 두 번째는 60%의 비율&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/4fr6fr.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;grid-template-columns: 4fr 6fr;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;한 행에 3개씩 표현&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/1fr1fr1fr.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;grid-template-columns: 1fr 1fr 1fr;
또는
grid-template-columns: repeat(3, 1fr);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;한 쪽은 고정, 나머지는 자유~&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/grid_px.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;grid-template-columns: 200px 1fr;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;gap&quot;&gt;gap&lt;/h4&gt;

&lt;p&gt;쉽게 말해 gap을 두는 것이라고 생각하면 좋다!!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/gap.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;grid-template-columns: 4fr 6fr;
grid-gap: 1rem;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>SungSeokMin</name><email>jkl154527@gmail.com</email></author><category term="frontend" /><category term="grid" /><summary type="html">Grid</summary></entry><entry><title type="html">FlexBox</title><link href="https://sungseokmin.github.io/frontend/flexbox/Flex/" rel="alternate" type="text/html" title="FlexBox" /><published>2021-02-03T00:00:00+09:00</published><updated>2021-02-03T00:00:00+09:00</updated><id>https://sungseokmin.github.io/frontend/flexbox/Flex</id><content type="html" xml:base="https://sungseokmin.github.io/frontend/flexbox/Flex/">&lt;blockquote&gt;
  &lt;h3 id=&quot;flexbox-부모-속성&quot;&gt;FlexBox (부모 속성)&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;flex-direction: 주축 - 기본 값 : row&lt;br /&gt;
flex-wrap : 창의 너비에 따라 줄 바꿈 - 기본 값 : nowrap&lt;br /&gt;
justify-content : 중심축과 기준으로 정렬 - 기본 값 : flex-start&lt;br /&gt;
align-itmes : 교차축을 기준으로 정렬 - 기본 값 : flex-start&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;가로로-정렬된-모습을-볼-수-있다&quot;&gt;가로로 정렬된 모습을 볼 수 있다.&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/flexbox.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;display: flex;
flex-direction: row; // default값이기 때문에 적어주지 않아도 된다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;세로로-정렬된-모습을-볼-수-있다&quot;&gt;세로로 정렬된 모습을 볼 수 있다.&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/column.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;display: flex;
flex-direction: column;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;가로-축을-기준으로-가운데로-정렬된-모습을-볼-수-있다&quot;&gt;가로 축을 기준으로 가운데로 정렬된 모습을 볼 수 있다.&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/justify-content_center.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;display: flex;
flex-direction: row; // default값이기 때문에 적어주지 않아도 된다.
justify-content: center
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;가로-축을-기준으로-양-옆-공백-없는-사이에-간격을-둔-모습을-볼-수-있다&quot;&gt;가로 축을 기준으로 양 옆 공백 없는, 사이에 간격을 둔 모습을 볼 수 있다.&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/justify-content_between.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;display: flex;
flex-direction: row; // default값이기 때문에 적어주지 않아도 된다.
justify-content: space-between
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;가로-축을-기준으로-양-옆-공백이-있는-사이에-간격을-둔-모습을-볼-수-있다&quot;&gt;가로 축을 기준으로 양 옆 공백이 있는, 사이에 간격을 둔 모습을 볼 수 있다.&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/justify-content_around.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;display: flex;
flex-direction: row; // default값이기 때문에 적어주지 않아도 된다.
justify-content: space-around
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;세로-축을-기준으로-가운데-정렬된-모습을-볼-수-있다&quot;&gt;세로 축을 기준으로 가운데 정렬된 모습을 볼 수 있다.&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/center.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;display: flex;
flex-direction: column;
align-items: center;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;가로축을-기준으로-중앙으로-정렬된-모습을-볼-수-있다&quot;&gt;가로축을 기준으로 중앙으로 정렬된 모습을 볼 수 있다.&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/align-item.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;display: flex;
flex-direction: column
justify-content: center;
align-items: center;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;세로축을-기준으로-중앙으로-정렬된-모습을-볼-수-있다&quot;&gt;세로축을 기준으로 중앙으로 정렬된 모습을 볼 수 있다.&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/middle.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;display: flex;
flex-direction: row;
justify-content: center;
align-items: center;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;flexbox-자식-속성&quot;&gt;FlexBox (자식 속성)&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;flex-basis&quot;&gt;flex-basis&lt;/h4&gt;

&lt;p&gt;기본 너비 설정, 기본 값: auto&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;flex-grow&quot;&gt;flex-grow&lt;/h4&gt;

&lt;p&gt;item의 증가 너비 비율 설정 &amp;amp;&amp;amp; 콘텐츠가 없는 여백의 공간을 비율적으로 나눠 가진다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/grow.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.container {
height: 100vh;
background-color: gray;
display: flex;
flex-direction: row;
align-items: flex-start;
}
.item1 {
flex-grow: 1;
background-color: pink;
}
.item2 {
flex-grow: 2;
background-color: green;
}
.item3 {
flex-grow: 1;
background-color: yellow;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;flex-shrink&quot;&gt;flex-shrink&lt;/h4&gt;

&lt;p&gt;item의 감소 너비 비율을 설정&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;창 너비를 줄였을 때 1:2:1 비율로 줄어든다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/shrink.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.container {
height: 100vh;
background-color: gray;
display: flex;
flex-direction: row;
align-items: flex-start;
}
.item1 {
flex-shrink: 1;
background-color: pink;
}
.item2 {
flex-shrink: 2;
background-color: green;
}
.item3 {
flex-shrink: 1;
background-color: yellow;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;align-self&quot;&gt;align-self&lt;/h4&gt;

&lt;p&gt;각각의 요소를 설정할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/align-self.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.container {
height: 100vh;
background-color: gray;
display: flex;
flex-direction: row;
align-items: flex-start;
}
.item1 {
flex: 1;
align-self: flex-start;
background-color: pink;
}
.item2 {
flex: 1;
align-self: center;
background-color: green;
}
.item3 {
flex: 1;
align-self: flex-end;
background-color: yellow;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>SungSeokMin</name><email>jkl154527@gmail.com</email></author><category term="frontend" /><category term="flexbox" /><summary type="html">FlexBox (부모 속성)</summary></entry><entry><title type="html">2 weeks project</title><link href="https://sungseokmin.github.io/project/2%20weeks%20project/Project-1/" rel="alternate" type="text/html" title="2 weeks project" /><published>2021-02-01T00:00:00+09:00</published><updated>2021-02-01T00:00:00+09:00</updated><id>https://sungseokmin.github.io/project/2%20weeks%20project/Project-1</id><content type="html" xml:base="https://sungseokmin.github.io/project/2%20weeks%20project/Project-1/">&lt;blockquote&gt;
  &lt;h2 id=&quot;shape-of-voice&quot;&gt;Shape Of Voice&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;사람의 목소리 파동을 이용해 채도, 명도, 색을 다르게 나타내는 이미지를 생성하는 웹&lt;/p&gt;

&lt;h3 id=&quot;schema&quot;&gt;schema&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;user : 각 유저들의 정보&lt;/li&gt;
  &lt;li&gt;voice : 목소리에 대한 정보&lt;/li&gt;
  &lt;li&gt;board : 게시글에 대한 정보&lt;/li&gt;
  &lt;li&gt;voice_board : voice table과 board table의 join table
&lt;img src=&quot;/img/schema.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;wire-frame&quot;&gt;Wire frame&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/wireframe.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;flowchart&quot;&gt;Flowchart&lt;/h3&gt;

&lt;h4 id=&quot;client&quot;&gt;client&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/client_flowchart.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;server&quot;&gt;server&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/server_flowchart_2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;api&quot;&gt;API&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://app.gitbook.com/@cloudacesending/s/shapeofvoice/&quot;&gt;ShapeOfVoice API Documents&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;진행하면서-겪은-상황&quot;&gt;진행하면서 겪은 상황&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;sequelize의-many-to-many를-설정해주는-데-어려움을-겪었다&quot;&gt;sequelize의 Many To Many를 설정해주는 데 어려움을 겪었다.&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;공식문서, 블로그 에서는 아래와 같은 글들이 있었다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ex)
voice.belongsToMany(board, { through: 'voice_board'});
board.belongsToMany(voice, { through: 'voice_board'});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;models &amp;gt; index.js에서 console.log(sequelize.models)한 결과 voice_board테이블은
있었지만 데이터베이스에서는 없었다.&lt;/p&gt;

&lt;p&gt;❗️여기서 migrations폴더에 voice_board를 만들어주는 파일이 없는데 안 만들어지는 게 당연하지 않을까 ? 라는 생각을 했다.&lt;/p&gt;

&lt;p&gt;팀원과 의견을 합쳐 하나 둘 씩 해결하기 시작…&lt;/p&gt;

&lt;h5 id=&quot;해결-방법&quot;&gt;해결 방법&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;migration폴더에 voice_board 테이블을 생성하는 파일을 만들자 !&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npx migration:generate --name voice_board
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;voiceId와 boardId를 만들어 각각 voice테이블의 id와 board테이블의 id를 참조시켜주자 !&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module.exports = {
  up: async (queryInterface, Sequelize) =&amp;gt; {
    await queryInterface.createTable('voice_board', {
      id: {
        allowNull: false,
        autoIncrement: true,
        primaryKey: true,
        type: Sequelize.INTEGER,
      },
      voiceId: {
        type: Sequelize.INTEGER,
        references: { model: 'voices', key: 'id' },
        onDelete: 'CASCADE',
      },
      boardId: {
        type: Sequelize.INTEGER,
        references: { model: 'boards', key: 'id' },
        onDelete: 'CASCADE',
      },
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE,
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE,
      },
    });
  },

  down: async (queryInterface, Sequelize) =&amp;gt; {
    await queryInterface.dropTable('voice_board');
  },
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;modles폴더 안에 있는 board, voice파일의 associate 안에 내용을 추가해주자 !&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;board.belongsToMany(models.voice, {
        through: 'voice_board',
      });
voice.belongsToMany(models.board, {
        through: 'voice_board',
      });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;결과&quot;&gt;결과&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/result.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;잘 해결 되었다!!&lt;/p&gt;

&lt;hr /&gt;</content><author><name>SungSeokMin</name><email>jkl154527@gmail.com</email></author><category term="project" /><category term="2 weeks project" /><summary type="html">Shape Of Voice</summary></entry><entry><title type="html">HTML/CSS</title><link href="https://sungseokmin.github.io/frontend/html/css/CSS-frontend/" rel="alternate" type="text/html" title="HTML/CSS" /><published>2021-02-01T00:00:00+09:00</published><updated>2021-02-01T00:00:00+09:00</updated><id>https://sungseokmin.github.io/frontend/html/css/CSS-frontend</id><content type="html" xml:base="https://sungseokmin.github.io/frontend/html/css/CSS-frontend/">&lt;blockquote&gt;
  &lt;h2 id=&quot;기본적인-html-문법&quot;&gt;기본적인 HTML 문법&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;inline-vs-block&quot;&gt;Inline vs Block&lt;/h3&gt;

&lt;p&gt;대표적으로 span, div&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Inline은 크기의 영역만큼 차지하고 Block은 한 줄을 차지한다.
&lt;img src=&quot;/img/div_span.png&quot; alt=&quot;Inline VS Block&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ul--li&quot;&gt;ul &amp;gt; li&lt;/h3&gt;

&lt;p&gt;목록을 나타낼 때 사용하는 목록태그&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;앞의 동그라미를 없애고 싶으면 list-style: none 속성을 주면 된다.
&lt;img src=&quot;/img/ul_li.png&quot; alt=&quot;ul_li&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;li--input&quot;&gt;li &amp;gt; input&lt;/h3&gt;

&lt;p&gt;input태그는 Inline 속성이므로 ul &amp;gt; li 와 같은 목록 태그로 감싸줘도 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/li_input.png&quot; alt=&quot;li_input&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;li--label--input&quot;&gt;li &amp;gt; label &amp;gt; input&lt;/h3&gt;

&lt;p&gt;label태그 안에 input태그를 넣어주게 되면 for속성을 사용하지 않아도 된다.
&lt;img src=&quot;/img/li_label_input.png&quot; alt=&quot;li_label_input&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;table&quot;&gt;table&lt;/h3&gt;

&lt;p&gt;⭐️ TIP : border-collapse: collapse를 사용하면 표의 테두리와 셀의 테두리 사이의 간격을 사라지게 할 수 있다.&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;th: 테이블의 헤더, 즉 카테고리를 작성&lt;/li&gt;
  &lt;li&gt;tr: 한 행을 열어주는 역할&lt;/li&gt;
  &lt;li&gt;td: 테이블의 데이터, 즉 내용을 작성&lt;br /&gt;
&lt;img src=&quot;/img/table.png&quot; alt=&quot;table&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;a&quot;&gt;a&lt;/h3&gt;

&lt;p&gt;⭐️ TIP : blank : 새 창 또는 탭에서 문서를 연다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;a href=&quot;https://sungseokmin.github.io&quot;&amp;gt;git blog&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;img&quot;&gt;img&lt;/h3&gt;

&lt;p&gt;⭐️ TIP : 링크의 밑줄을 없애고 싶다면 ?? text-decoration: none;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;img src=&quot;img.jpg&quot; alt=&quot;사진의 내용&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;유용한-css-속성&quot;&gt;유용한 CSS 속성&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;글자 가운데 정렬
text-align: center;

배경 이미지 넣기
background-image: url('주소');

줄 높이 정하기
line-heignt: 다양하게 줄 수 있다. normal, length, number, px, % ...

POSITION
- relative : 지금 현재의 위치를 기준
- absolute : html문서를 기준으로 right: 0; bottom:0; 을 하면 오른쪽 하단에 위치
- fixed : 고정, 스크롤을 올리거나 내려도 항상 같은 위치에 존재

⭐️ modal, 로그인 창 같은 것을 가운데로 오게 하고 싶다면 ??
position: absolute; top: 50%; left: 50%; transform: translate(-50%. -50%);

테두리 둥굴게
border-radius : px, % 둘 다 가능

~계속해서 추가 예정~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>SungSeokMin</name><email>jkl154527@gmail.com</email></author><category term="frontend" /><category term="html" /><category term="css" /><summary type="html">기본적인 HTML 문법</summary></entry><entry><title type="html">React-router-dom</title><link href="https://sungseokmin.github.io/frontend/react/router/React_router/" rel="alternate" type="text/html" title="React-router-dom" /><published>2021-01-31T00:00:00+09:00</published><updated>2021-01-31T00:00:00+09:00</updated><id>https://sungseokmin.github.io/frontend/react/router/React_router</id><content type="html" xml:base="https://sungseokmin.github.io/frontend/react/router/React_router/">&lt;blockquote&gt;
  &lt;h2 id=&quot;react-router-&quot;&gt;React Router ?&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;SPA : Single Page Application
    &lt;ul&gt;
      &lt;li&gt;페이지 깜박임 없이 하나의 페이지로 동작하는 어플리케이션&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;설치-방법&quot;&gt;설치 방법&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install react-router-dom
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;사용-방법&quot;&gt;사용 방법&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;react-router-dom 모듈 안에는 각각의 함수들이 있다.
    &lt;ul&gt;
      &lt;li&gt;BrowserRouter : History API를 사용하고, url과 ui를 동기화 해주는 라우터&lt;/li&gt;
      &lt;li&gt;Route : user가 원하는 경로와 Route안의 path에 있는 경로가 일치할 경우 해당 컴포넌트를 렌더링 한다.&lt;/li&gt;
      &lt;li&gt;Link : html의 a태그와 비슷하다.&lt;/li&gt;
      &lt;li&gt;Switch : Route 태그를 순서대로 확인한 후, 첫 번째로 일치하는 Route로 렌더링 한다.&lt;/li&gt;
      &lt;li&gt;withRouter : match, history, location을 Props로 전달해주는 역할&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import React, {Component} from 'react';
import {BrowserRouter, Route, Link, Switch, withRouter} from 'react-router-dom';

function MyPage (props) {
  return (
    &amp;lt;BrowserRouter&amp;gt;
      &amp;lt;div className='menu'&amp;gt;
        &amp;lt;Link to='/'&amp;gt;&amp;lt;/Link&amp;gt;
        &amp;lt;Link to='/login'&amp;gt;로그인&amp;lt;/Link&amp;gt;
        &amp;lt;Link to='/mypage'&amp;gt;마이페이지&amp;lt;/Link&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;Switch&amp;gt;
        &amp;lt;Route path='/' component={Home} /&amp;gt;
        &amp;lt;Route path='/login' component={Home} /&amp;gt;
        &amp;lt;Route path='/mypage'component={Home} /&amp;gt;
      &amp;lt;/Switch&amp;gt;
    &amp;lt;/BrowserRouter&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>SungSeokMin</name><email>jkl154527@gmail.com</email></author><category term="frontend" /><category term="React" /><category term="Router" /><summary type="html">React Router ?</summary></entry><entry><title type="html">Express</title><link href="https://sungseokmin.github.io/backend/express/Express-backend/" rel="alternate" type="text/html" title="Express" /><published>2021-01-31T00:00:00+09:00</published><updated>2021-01-31T00:00:00+09:00</updated><id>https://sungseokmin.github.io/backend/express/Express-backend</id><content type="html" xml:base="https://sungseokmin.github.io/backend/express/Express-backend/">&lt;blockquote&gt;
  &lt;h2 id=&quot;express-&quot;&gt;Express ?&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://expressjs.com/ko/&quot;&gt;공식문서&lt;/a&gt; 참고&lt;/li&gt;
  &lt;li&gt;Node.js를 위한 빠르고 대중적인 프레임워크&lt;/li&gt;
  &lt;li&gt;Middleware를 사용할 수 있다는 큰 장점을 가지고 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;설치-방법&quot;&gt;설치 방법&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install express
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;express를-이용한-server-구현&quot;&gt;express를 이용한 server 구현&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// express 모듈을 가져온다.
const express = require('express');
const app = express();

app.get('/', (request, response) =&amp;gt; {
  res.send('Hello World');
})

app.listen(3000, () =&amp;gt; {
  console.log('Express Start')
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;routing&quot;&gt;Routing&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;method(GET, POST, PUT, DELETE …)와 url에 따른 분기&lt;/li&gt;
  &lt;li&gt;즉, url 및 특정 HTTP 요청 메소드인 엔드포인트(ex… ‘/mypage’)에 대한 client 요청에 application이 응답하는 방법을 결정하는 것&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const express = require('express');
const app = express();

// http://localhost:3000/ 경로로 이동할 경우 화면에 Hello가 출력된다.
app.get('/', (req, res) =&amp;gt; {
  res.status(200).send('Hello');
})

app.get('/mypage', (req,res) =&amp;gt; {
  res.status(200).send('MyPage');
})

app.post('경로', (req, res) =&amp;gt; {
  TODO :
})

app.delete('경로', (req, res) =&amp;gt; {
  TODO :
})

app.listen(3000, () =&amp;gt; {
  console.log('Express Start')
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;middleware&quot;&gt;Middleware&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;요청과 응답 중간에 껴서 어떠한 동작을 실행해주는 프로그램&lt;/li&gt;
  &lt;li&gt;대표적인 Middleware
    &lt;ul&gt;
      &lt;li&gt;morgan : request를 loggin 해주는 미들웨어&lt;/li&gt;
      &lt;li&gt;cors : 현재 도메인에서 다른 도메인으로 리소스 요청 할 경우 제한을 정해주는 미들웨어
        &lt;ul&gt;
          &lt;li&gt;Cross Origin Resource Sharing의 약자&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;express-session : 서버가 세션을 이용하게 해주고 쿠키에 세션 정보를 담을 수 있게 해주는 미들웨어&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;설치-방법-1&quot;&gt;설치 방법&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install morgan
npm install cors
npm install express-session
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;사용-방법&quot;&gt;사용 방법&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const express = require('express');
const app = express();
const morgan = require('morgan');
const cors = require('cors');
const session = require('express-session');

// 요청에 대한 본문을 해석해주는 미들웨어
app.use(express.json());

// post로 요청된 body를 쉽게 추출할 수 있는 미들웨어
app.use(express.urlencoded({extended: false}));

// morgan 미들웨어 사용
app.use(logger('dev'));

// cors 미들웨어 사용
app.use(
  cors({
    origin: 'https://localhost:3000',
    methods: ['GET', 'POST', 'UPDATE', 'OPTIONS'],
    credentials: true,
  })
);

// express-session 미들웨어 사용
app.use(session({
  secret: **필수항목** 비밀 키
  resave: false,
  saveUninitialized: false,
  cookie: {
    // 서버와 요청의 도메인이 일치하는 경우 쿠키 전송
    domain: 'localhost',

    // 서버의 요청의 세부경로가 일치하는 경우 쿠키 전송
    path: '/',

    // maxAge, expires =&amp;gt; 쿠키의 유효기간 설정
    maxAge: 24 * 6 * 60,

    // 스크립트의 쿠키 접근 가능 여부 설정
    httpOnly: true,

    // HTTPS에서만 쿠키 전송 여부 설정
    secure: true,

    // CORS 요청의 경우, 옵션 및 메소드에 따라 쿠키 전송 여부 설정
    sameSite: 'none'
  }
}))

app.listen(3000, () =&amp;gt; {
  console.log('Express Start');
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>SungSeokMin</name><email>jkl154527@gmail.com</email></author><category term="backend" /><category term="Express" /><summary type="html">Express ?</summary></entry><entry><title type="html">HTTP</title><link href="https://sungseokmin.github.io/backend/http/HTTP-backend/" rel="alternate" type="text/html" title="HTTP" /><published>2021-01-31T00:00:00+09:00</published><updated>2021-01-31T00:00:00+09:00</updated><id>https://sungseokmin.github.io/backend/http/HTTP-backend</id><content type="html" xml:base="https://sungseokmin.github.io/backend/http/HTTP-backend/">&lt;blockquote&gt;
  &lt;h2 id=&quot;http-&quot;&gt;HTTP ?&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;웹 상에서 client와 server 간에 요청/응답으로 데이터를 주고 받을 수 있는 프로토콜&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;작동방식&quot;&gt;작동방식&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;client -&amp;gt; (요청) -&amp;gt; server&lt;/li&gt;
  &lt;li&gt;Server -&amp;gt; (응답) -&amp;gt; client&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;특징&quot;&gt;특징&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;stateless(무상태성) : 이전 요청이나 다음 요청을 기억하지 않는다.
    &lt;ul&gt;
      &lt;li&gt;ex) client가 server에게 고기를 먹으러 가자고 요청을 보내자 server는 알겠다고 응답을 한다.&lt;/li&gt;
      &lt;li&gt;응답을 받은 client는 언제갈까 라고 server에게 요청을 보내지만 server는 무엇을? 이라는 응답을 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;connectionless(무연결성) : 한번의 요청에는 한번의 응답을 한다.
    &lt;ul&gt;
      &lt;li&gt;ex) client가 server에게 뭐해?, 바빠?, 어디갈까? 라는 요청을 한번에 보낼 수 없다는 뜻!!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;메소드&quot;&gt;메소드&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;GET : 서버로부터 정보를 조회하기 위해 설계된 메소드
    &lt;ul&gt;
      &lt;li&gt;브라우저에서 웹페이지를 열거나 게시물을 읽는 등 조회하는 행위는 GET 요청&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;POST : 기존에 없던 리소스를 생성/변경하기 위해 설계된 메소드
    &lt;ul&gt;
      &lt;li&gt;기존에 없던 게시글을 작성하는 행위 등은 POST 요청&lt;/li&gt;
      &lt;li&gt;데이터가 Body로 전송된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;PUT : 기존에 있던 리소스를 변경하기 위해 설계된 메소드
    &lt;ul&gt;
      &lt;li&gt;기존에 있던 게시글을 수정하는 행위 등은 PUT 요청&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DELETE : 리소스를 삭제하기 위해 설계된 메소드
    &lt;ul&gt;
      &lt;li&gt;게시글 삭제&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;OPTIONS, TRACE, CONNECT …&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;get-post의-차이&quot;&gt;GET, POST의 차이&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;GET은 서버에게 동일한 요청을 여러 번 전송하더라도 동일한 응답이 돌아와야 하고
    &lt;ul&gt;
      &lt;li&gt;서버의 데이터나 상태를 변경시키지 않아야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;POST는 서버에게 동일한 요청을 여러 번 전송해도 응답이 항상 다를 수 있다.
    &lt;ul&gt;
      &lt;li&gt;서버의 데이터나 상태를 변경 시킬 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;http-header&quot;&gt;HTTP HEADER&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/header.png&quot; alt=&quot;Headers&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;response-status&quot;&gt;Response Status&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/request_status.png&quot; alt=&quot;응답코드&quot; /&gt;&lt;/p&gt;</content><author><name>SungSeokMin</name><email>jkl154527@gmail.com</email></author><category term="backend" /><category term="http" /><summary type="html">HTTP ?</summary></entry><entry><title type="html">Node.js</title><link href="https://sungseokmin.github.io/backend/node/Node-backend/" rel="alternate" type="text/html" title="Node.js" /><published>2021-01-31T00:00:00+09:00</published><updated>2021-01-31T00:00:00+09:00</updated><id>https://sungseokmin.github.io/backend/node/Node-backend</id><content type="html" xml:base="https://sungseokmin.github.io/backend/node/Node-backend/">&lt;blockquote&gt;
  &lt;h2 id=&quot;nodejs-&quot;&gt;Node.js ?&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;V8 JavaScript 엔진으로 빌드된 JavaScript 런타임&lt;/li&gt;
  &lt;li&gt;즉, 브라우저 외의 다른 환경에서도 사용할 수 있게 해주는 런타임&lt;/li&gt;
  &lt;li&gt;module 시스템을 구축하고 있다.&lt;/li&gt;
  &lt;li&gt;http server가 내장되어 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;설치-방법&quot;&gt;설치 방법&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;'https://nodejs.org'&quot;&gt;공식사이트&lt;/a&gt;를 통해 파일을 다운 받을 수 있다.&lt;/li&gt;
  &lt;li&gt;node가 설치되면 npm(Node Package Manager)가 같이 설치 된다.&lt;/li&gt;
  &lt;li&gt;설치가 되면 터미널을 켠 후 node -v와 npm -v를 입력해본다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;npm-&quot;&gt;npm ?&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;패키지를 모아놓은 저장소, 이미 만들어져 있는 패키지들을 사용할 수 있게 해주는 도구&lt;/li&gt;
  &lt;li&gt;패키지들을 체계적으로 관리하기 위해서 package.json을 생성한다. 패키지명, 패키지 버전을 기록한다.&lt;/li&gt;
  &lt;li&gt;package.json 생성방법
    &lt;ul&gt;
      &lt;li&gt;npm init&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;npm install [package Name]을 이용해 패키지들을 다운 받을 수 있다.
    &lt;ul&gt;
      &lt;li&gt;ex) npm install express&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;packagejson-&quot;&gt;package.json ?&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;패캐지들을 체계적으로 관리하기 위해서 필요한 파일&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dependencies-devdependencies&quot;&gt;dependencies, devDependencies&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;dependencies ?
    &lt;ul&gt;
      &lt;li&gt;프로젝트에 필요한 패키지들의 이름과 버전을 기록
        &lt;ul&gt;
          &lt;li&gt;ex) express, cors, sequelize, mysql2 …&lt;/li&gt;
          &lt;li&gt;설치) npm install express&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;devDependencies ?
    &lt;ul&gt;
      &lt;li&gt;프로젝트 개발에 필요한 패캐지들의 이름과 버전을 기록
        &lt;ul&gt;
          &lt;li&gt;ex) nodemon, eslint, prettier …&lt;/li&gt;
          &lt;li&gt;설치) npm install nodemon –save-dev&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;server-구현&quot;&gt;server 구현&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// http 모듈을 불러온다.
const http = require('http');
const url = require('url');

// http://localhost:3000 확인 가능
http.createServer((request, response) =&amp;gt; {

  // user가 요청한 url에서 path를 가져온다.
  const path = url.parse(request.url, true).pathname;

  // user가 요청한 method가 GET, POST, 그 외 일 경우
  if(request.method === 'GET') {
    // path가 /일 경우
    if(path === '/') {
      ...
    }
  } else if(request.method === 'POST') {
    ...
  } else {
    ...
  }

}).listen(3000);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>SungSeokMin</name><email>jkl154527@gmail.com</email></author><category term="backend" /><category term="node" /><summary type="html">Node.js ?</summary></entry><entry><title type="html">React_hooks</title><link href="https://sungseokmin.github.io/frontend/react/hooks/React_hooks/" rel="alternate" type="text/html" title="React_hooks" /><published>2021-01-31T00:00:00+09:00</published><updated>2021-01-31T00:00:00+09:00</updated><id>https://sungseokmin.github.io/frontend/react/hooks/React_hooks</id><content type="html" xml:base="https://sungseokmin.github.io/frontend/react/hooks/React_hooks/">&lt;blockquote&gt;
  &lt;h2 id=&quot;react-hooks-&quot;&gt;React Hooks ?&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;function Component에서 state를 관리하기 위해 해주는 고마운 녀석&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;사용-방법&quot;&gt;사용 방법&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;useState : function component에서 상태를 저장하고 수정할 수 있도록 도와준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import React, {useState} = 'react';

function Login (props) {
  // 배열의 첫 요소는 값을 저장할 변수
  // 배열의 두 번째 요소는 값을 바꿀 변수
  const [id, setId] = useState('') // useState를 통해 id값을 저장, id = '';
  const [password, setPassword] = useState('')

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;h1&amp;gt;로그인 페이지&amp;lt;/h1&amp;gt;
      &amp;lt;input type='text' value={id} onChange={(e) =&amp;gt; setId(e.target.value)} /&amp;gt;
      &amp;lt;input type='text' value={password} onChange={(e) =&amp;gt; setPassword(e.target.value)} /&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;useEffect : Component가 렌더링 될 때 마다 특정 작업을 수행하도록 설정할 수 있도록 도와준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import React, {useState, useEffect} = 'react';

function Login (props) {
  // 배열의 첫 요소는 값을 저장할 변수
  // 배열의 두 번째 요소는 값을 바꿀 변수
  const [id, setId] = useState('') // useState를 통해 id값을 저장, id = '';
  const [password, setPassword] = useState('')

  useEffect(() =&amp;gt; {
    console.log('렌더링 완료') // 밑의 onChange로 인해 계속 id와 password가 쳐질 때 마다 useEffect가 호출된다.
                            // 그렇게 되면 너무 비효율 적이겠지요 ?? 그럼 어떻게 하냐 !! 아래 참고~
  })

  // 두 번째 인자로 빈 배열을 넣어준다. =&amp;gt; 처음 렌더링 될 때만 호출된다
  useEffect(() =&amp;gt; {
    console.log('componentDidMount와 같은 효과');   // 그럼 update될 때 마다 호출하고 싶다면 어떻게 ? 아래 참고 ~
  }, [])

  // 특정 값이 변경이 될 때만 호출
  useEffect(() =&amp;gt; {
    console.log('id가 바뀔 때 마다 )
  }, [id])

  // 마운트(처음 나타났을 때), 언마운트(사라질 때) 관리
    useEffect(() =&amp;gt; {
      console.log('Hi!!!')
      return () =&amp;gt; {
        console.log('bye...');
      }
    })

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;h1&amp;gt;로그인 페이지&amp;lt;/h1&amp;gt;
      &amp;lt;input type='text' value={id} onChange={(e) =&amp;gt; setId(e.target.value)} /&amp;gt;
      &amp;lt;input type='text' value={password} onChange={(e) =&amp;gt; setPassword(e.target.value)} /&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>SungSeokMin</name><email>jkl154527@gmail.com</email></author><category term="frontend" /><category term="React" /><category term="hooks" /><summary type="html">React Hooks ?</summary></entry><entry><title type="html">React</title><link href="https://sungseokmin.github.io/frontend/react/React-frontend/" rel="alternate" type="text/html" title="React" /><published>2021-01-31T00:00:00+09:00</published><updated>2021-01-31T00:00:00+09:00</updated><id>https://sungseokmin.github.io/frontend/react/React-frontend</id><content type="html" xml:base="https://sungseokmin.github.io/frontend/react/React-frontend/">&lt;blockquote&gt;
  &lt;h2 id=&quot;react-&quot;&gt;React ?&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;페이스북이 만든 라이브러리&lt;/li&gt;
  &lt;li&gt;JSX : javascript 확장 언어&lt;/li&gt;
  &lt;li&gt;MVC pattern 중 V(View)를 담당한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;특징&quot;&gt;특징&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;반드시 하나의 엘리먼트로 감싸야한다.&lt;/li&gt;
  &lt;li&gt;javascript 코드를 적용하고 싶을 때는 {} 안에 작성한다.&lt;/li&gt;
  &lt;li&gt;JSX 내부에서는 if문 대신 삼함연산자를 사용한다.&lt;/li&gt;
  &lt;li&gt;Component System
    &lt;ul&gt;
      &lt;li&gt;Component : 웹을 잘게 잘게 쪼갠 것
        &lt;ul&gt;
          &lt;li&gt;독립적 기능, 재사용 가능&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;조건부-렌더링&quot;&gt;조건부 렌더링&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;JSX 문법 에서는 삼항연산자를 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  1+1 === 2 ? (&amp;lt;div&amp;gt;정답&amp;lt;/div&amp;gt;) : (&amp;lt;div&amp;gt;오답&amp;lt;/div&amp;gt;)

  // 조건이 true일 때만 보여준다.
  1+1 === 2 &amp;amp;&amp;amp; (&amp;lt;div&amp;gt;정답&amp;lt;/div&amp;gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;설치-방법&quot;&gt;설치 방법&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;터미널을 켜고 다음과 같이 수행&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npx create-react-app [폴더 이름]
cd [폴더 이름]

// 실행
npm start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;function-component-vs-class-component&quot;&gt;function Component VS class Component&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Component : JavaScript 함수와 유사하며, 화면에 어떻게 표시되는지를 기술하는 React 엘리먼트를 반환한다.&lt;/li&gt;
  &lt;li&gt;props : 부모 Component로부터 물려받은 속성
    &lt;ul&gt;
      &lt;li&gt;순수 함수처럼 작동해야한다.
        &lt;ul&gt;
          &lt;li&gt;순수 함수 : 입력값을 바꾸려 하지 않고 항상 동일한 입력값에 대해 동일한 결과를 반환해야 한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;state : 해당 Component에서 사용할 수 있는 상태&lt;/li&gt;
  &lt;li&gt;state는 직접적인 수정이 불가능하다!! 반드시 setState를 통해 state의 값을 변경해준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;function-component&quot;&gt;function Component&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function Login(props) {
  return &amp;lt;h1&amp;gt;로그인 화면&amp;lt;/h1&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;class-component&quot;&gt;class Component&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Login exntends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      id = 'sung';    // 직접 수정 불가 !! 변경하려면 아래와 같이 setState를 사용해야 한다.
    };
  }

  changeId = () =&amp;gt; {
    this.setState({id: 'seok'});
  }

  render() {
    return &amp;lt;h1&amp;gt;로그인 화면&amp;lt;h1&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;흐름을-이해해보세요-&quot;&gt;흐름을 이해해보세요 !&lt;/h3&gt;

&lt;p&gt;index.js&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import React, {Component} from 'react';
import Mypage from './Mypage.js' // .js는 생략 가능

class App extends Component {
  constructor(props) {
    super(props);

    // id, age, hobby라는 state(상태)를 가지고 있다.
    this.setState = {
      id : 'sung',
      age : 27,
      hobby: 'coding'
    }
  }

  render() {
    return &amp;lt;div&amp;gt;      // id와 age라는 이름으로 Mypage 컴포넌트로 props를 전달
      &amp;lt;Mypage id={this.state.id} age={this.state.age} /&amp;gt;
    &amp;lt;/div&amp;gt;
  }
}

export default App;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;mypage.js&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import React from 'react'

// 구조분해할당으로 값을 받아올 수 있다.
const Mypage = ({id, age}) =&amp;gt; {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;div&amp;gt;{id}&amp;lt;/div&amp;gt;
      &amp;lt;div&amp;gt;{age}&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}

또는

const Mypage = (props) =&amp;gt; {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;div&amp;gt;{this.props.id}&amp;lt;/div&amp;gt;
      &amp;lt;div&amp;gt;{this.props.age}&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}

export default Mypage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;react-lifecycle&quot;&gt;React Lifecycle&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;constructor -&amp;gt; render -&amp;gt; componentDidMount -&amp;gt;
(setState/props 바뀔 때) -&amp;gt; ComponentDidUpdate -&amp;gt; render -&amp;gt;
(부모가 자식 component를 없앨 때 ) -&amp;gt; componentWillUmmount -&amp;gt; 소멸
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/lifecycle.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>SungSeokMin</name><email>jkl154527@gmail.com</email></author><category term="frontend" /><category term="React" /><summary type="html">React ?</summary></entry></feed>