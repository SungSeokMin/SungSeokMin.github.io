I"o<blockquote>
  <p>CSR(Client Side Rendering) &amp; SSR(Server Side Rendering)</p>
</blockquote>

<ul>
  <li>
    <p>CSR ?</p>

    <ul>
      <li>브라우저가 서버에 HTML, JS파일을 요청한 후 로드되면 사용자의 상호작용에 따라 JS를 이용해서 동적으로 페이지를 렌더링 시키는 방법</li>
    </ul>
  </li>
  <li>
    <p>SSR ?</p>

    <ul>
      <li>브라우저가 페이지를 요청할 때마다 HTML, CSS, JS 파일 및 데이터를 받아와서 페이지를 렌더링 시키는 방법</li>
    </ul>
  </li>
  <li>
    <p>장점과 단점</p>
    <ul>
      <li>CSR의 경우는 처음 로딩하는 시간이 오래 걸리고, 검색엔진 초기화(SEO)의 문제가 있지만, 각 페이지 요청 시 빠르게 렌더링 되기 때문에 UX(사용자 경혐)이 좋다.</li>
      <li>SSR의 경우는 처음 로딩하는 시간이 짧고, 검색엔진 초기화(SEO)가 가능하지만, 각 페이지 요청 시 새로고침 되기 때문에 UX(사용자 경험)가 좋지 않다.</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>REST API</p>
</blockquote>

<blockquote>
  <p>브라우저 렌더링 과정</p>
</blockquote>

<blockquote>
  <p>Dom</p>
</blockquote>

<blockquote>
  <p>HTTP &amp; HTTPS</p>
</blockquote>

<blockquote>
  <p>CORS</p>
</blockquote>

<blockquote>
  <p>데이터 바인딩 (단방향, 양방향)</p>
</blockquote>
:ET