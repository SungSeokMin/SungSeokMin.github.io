<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://sungseokmin.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://sungseokmin.github.io/" rel="alternate" type="text/html" /><updated>2021-02-20T16:34:12+09:00</updated><id>https://sungseokmin.github.io/feed.xml</id><title type="html">Happy Developer</title><subtitle>Happy Blog</subtitle><author><name>SungSeokMin</name><email>jkl154527@gmail.com</email></author><entry><title type="html">React-TypeScript</title><link href="https://sungseokmin.github.io/frontend/react-typescript/react-typescript-copy/" rel="alternate" type="text/html" title="React-TypeScript" /><published>2021-02-20T00:00:00+09:00</published><updated>2021-02-20T00:00:00+09:00</updated><id>https://sungseokmin.github.io/frontend/react-typescript/react-typescript%20copy</id><content type="html" xml:base="https://sungseokmin.github.io/frontend/react-typescript/react-typescript-copy/">&lt;blockquote&gt;
  &lt;h2 id=&quot;react에서-typescript-사용하기--redux&quot;&gt;React에서 TypeScript 사용하기 + Redux&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;❗️ 시작하기 전에 ❗️&lt;br /&gt;
TypeScript를 사용하면서 어떤 건 .ts이고 어떤 건 .tsx인지 궁금했다.&lt;br /&gt;
Component를 작성 시 .tsx를 사용하고 그 외에는 .ts를 사용&lt;/p&gt;

&lt;h3 id=&quot;todolist&quot;&gt;TodoList&lt;/h3&gt;

&lt;h4 id=&quot;파일-구조&quot;&gt;파일 구조&lt;/h4&gt;

&lt;p&gt;&lt;img width=&quot;265&quot; alt=&quot;스크린샷 2021-02-20 오후 2 44 50&quot; src=&quot;https://user-images.githubusercontent.com/72539723/108585206-893ba280-738a-11eb-909b-9a32937333b6.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;redux-setting&quot;&gt;Redux Setting&lt;/h3&gt;

&lt;h4 id=&quot;indexts&quot;&gt;index.ts&lt;/h4&gt;

&lt;p&gt;✔️ 궁금해&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;export * from ‘path’ ?
    &lt;ul&gt;
      &lt;li&gt;from 뒤에 오는 path에서 export된 것들을 가져와서 내보내준다는 의미!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export {default} from './reducer';
export * from './actions';
export * from './types';
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;actionsts&quot;&gt;actions.ts&lt;/h4&gt;

&lt;p&gt;✔️ 궁금해&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;typesafe-actions ?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;action, reducer를 보다 편한히 사용하기 위한 라이브러리&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;타입을 초기화 할 때 as const를 넣는 이유 ?&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;action 함수를 생성할 때 생성될 함수의 타입을 명확히 하기 위해서 !&lt;/li&gt;
      &lt;li&gt;as const를 작성한 경우
        &lt;ul&gt;
          &lt;li&gt;&lt;img width=&quot;302&quot; alt=&quot;스크린샷 2021-02-20 오후 2 58 43&quot; src=&quot;https://user-images.githubusercontent.com/72539723/108585488-22b78400-738c-11eb-9fa2-5985f60e38d8.png&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;as const를 작성하지 않은 경우
        &lt;ul&gt;
          &lt;li&gt;&lt;img width=&quot;305&quot; alt=&quot;스크린샷 2021-02-20 오후 2 58 15&quot; src=&quot;https://user-images.githubusercontent.com/72539723/108585462-129fa480-738c-11eb-9079-01b6f4b8c9aa.png&quot; /&gt; &lt;br /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { deprecated } from 'typesafe-actions';
const { createStandardAction } = deprecated;

export const ADD_TODO = 'todos/ADD_TODO' as const;
export const TOGGLE_TODO = 'todos/TOGGLE_TODO';
export const REMOVE_TODO = 'todos/REMOVE_TODO';

// 게시글 번호를 위해 변수 생성
let nextId = 1;

// 기존 방식의 action 함수 생성
export const addTodo = (text: string) =&amp;gt; ({
  type: ADD_TODO,
  payload: {
    id: nextId++,
    text,
  },
});

❗️ 조심 해야 하는 부분 ❗️
매개변수로 받아오는 값이랑 payload르 이용해 내보내주는 값이 다른 경우에는 createStandardAction을 사용하는 것이 아니라 createAction 메소드를 사용해야 한다.

// typesafe-actions 라이브러리를 이용한 action 함수 생성
export const toggleTodo = createStandardAction(TOGGLE_TODO)&amp;lt;number&amp;gt;();
export const removeTodo = createStandardAction(REMOVE_TODO)&amp;lt;number&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;typests&quot;&gt;types.ts&lt;/h4&gt;

&lt;p&gt;TypeScript를 사용하기 때문에 타입을 지정 해주기 위한 파일&lt;/p&gt;

&lt;p&gt;✔️ 궁금해&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;ActionType ?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;기존의 방식대로 작성을 하면 aciont 함수를 구현한 수 만큼 ReturnType을 이용해 다 적어줘야 했지만 한 번에 하는 방법이 있다&lt;/li&gt;
      &lt;li&gt;ActionType을 사용한 경우 (둘 다 같은 결과가 나온다.)
        &lt;ul&gt;
          &lt;li&gt;&lt;img width=&quot;623&quot; alt=&quot;스크린샷 2021-02-20 오후 3 19 21&quot; src=&quot;https://user-images.githubusercontent.com/72539723/108585976-02d58f80-738f-11eb-94a7-1dd0f4fc9530.png&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;ActionType을 사용하지 않은 경우
        &lt;ul&gt;
          &lt;li&gt;&lt;img width=&quot;630&quot; alt=&quot;스크린샷 2021-02-20 오후 3 18 41&quot; src=&quot;https://user-images.githubusercontent.com/72539723/108585966-edf8fc00-738e-11eb-8c5c-dd819b6fafb2.png&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Todo[] ?&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Todo라는 타입을 배열로 하겠다는 의미 !&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import {ActionType} from 'typesafe-actions;
import * as actions from './actions';

export type TodoAction = ActionType&amp;lt;typeof actions&amp;gt;;

export type Todo = {
  id: number;
  text: string;
  done: boolean;
};

export type TodoState = Todo[];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;reducerts&quot;&gt;reducer.ts&lt;/h4&gt;

&lt;p&gt;✔️ 궁금해&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;createReducer ?
    &lt;ul&gt;
      &lt;li&gt;보다 간편한 문법으로 reducer를 작성하기 위해 사용한 메소드&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;☀️ 어떤 문법을 사용하는 자기 마음 ☀️&lt;/li&gt;
  &lt;li&gt;기존 redux reducer 방식
    &lt;ul&gt;
      &lt;li&gt;&lt;img width=&quot;623&quot; alt=&quot;스크린샷 2021-02-20 오후 3 41 14&quot; src=&quot;https://user-images.githubusercontent.com/72539723/108586459-13d3d000-7392-11eb-9185-5848c4247c0e.png&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { createReducer } from 'typesafe-actions;
import { ADD_TODO, REMOVE_TODO, TOGGLE_TODO } from './actions';
import { TodoAction, TodoState } from './types';

// types에서 지정한 타입을 initalState의 타입으로 설정
const initialState: TodoState = [];

const todos = createReducer&amp;lt;TodoState, TodoAction&amp;gt;(initialState, {
  [ADD_TODO] : (state, action) =&amp;gt;
    state.concat({
      ...action.payload,
      done: false
    }),
  [TOGGLE_TODO]: (state, action) =&amp;gt;
    state.map((todo) =&amp;gt; (todo.id === action.payload ? { ...todo, done: !todo.done} : todo)),
  [REMOVE_TODO]: (state, action) =&amp;gt;
    state.filter((todo) =&amp;gt; todo.id !== action.payload),
})

export default todos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;modules--indexjs&quot;&gt;modules &amp;gt; index.js&lt;/h4&gt;

&lt;p&gt;rootReducer 생성&lt;/p&gt;

&lt;p&gt;✔️ 궁금해&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;combineReducers ?
    &lt;ul&gt;
      &lt;li&gt;여러개의 reducer를 combine(결합)시키기 위해 사용되는 메소드&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;왜 export를 두 번 하지 ?
    &lt;ul&gt;
      &lt;li&gt;combine한 rootReducer와 그 reducer의 Type을 내보낸다!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { combineReducers } from 'redux';
import todos from './todos';

const rootReducer = combineReducers({
  todos,
})

export default rootReducer;
export RootState = ReturnType&amp;lt;typeof rootReducer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;compoent-setting&quot;&gt;Compoent Setting&lt;/h2&gt;

&lt;h4 id=&quot;apptsx&quot;&gt;App.tsx&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import React from 'react';
import TodoApp from './containers/TodoApp';


function App() {
  return &amp;lt;TodoApp /&amp;gt;
}

export default App;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;indextsx&quot;&gt;index.tsx&lt;/h4&gt;

&lt;p&gt;열심히 Redux를 만들었으니 store를 생성 해야겠죠 !?&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import { Provider } from 'react-redux';
import { createStore } from 'redux';
import rootReducer from './modlues';

const store = createStore(rootReducer);

ReactDOM.render(
  &amp;lt;Provider store={store}&amp;gt;
    &amp;lt;App /&amp;gt;
  &amp;lt;/Provider&amp;gt;,
  document.getElementById('root')
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;todoapptsx&quot;&gt;TodoApp.tsx&lt;/h4&gt;

&lt;p&gt;전체적인 메소드를 관리하면서 자식 Compoenent에 props로 메소드를 내려주는 역할&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import React from 'react';
import { useDispatch, useSelector } from 'react-redux';
import TodoInsert from '../components/TodoInsert';
import TodoList from '../components/TodoList';
import { Rootstate } from '../modlues';
import { addTodo, toggleTodo, removeTodo } from '../modlues/todos/actions';

function TodoApp() {
  // useSelector를 이용해 store에 있는 todos에 접근한다.
  const todos = useSelector((state: Rootstate) =&amp;gt; state.todos);
  const dispatch = useDispatch();

  const onInsert = (text: string) =&amp;gt; {
    dispatch(addTodo(text));
  }

  const onToggle = (id: number) =&amp;gt; {
    dispatch(toggleTodo(id));
  }

  const onRemove = (id: number) =&amp;gt; {
    dispatch(removeTodo(id));
  }

  return (
    &amp;lt;&amp;gt;
      &amp;lt;TodoInsert onInsert={onInsert}&amp;gt;
      &amp;lt;TodoList todos={todos} onToggle={onToggle} onRemove={onRemove}&amp;gt;
    &amp;lt;/&amp;gt;
  )
}

export default TodoApp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;todoinsert&quot;&gt;TodoInsert&lt;/h3&gt;

&lt;p&gt;할 일을 추가할 수 있도록 구현한 Component&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import React, { FormEvent, useState } from 'react';

// 부모 Component로부터 받는 props의 타입을 정해준다.
type todoInsertProps = {
  onInsert: (text: string) =&amp;gt; void;
}

function TodoInsert({ onInsert }: todoInserProps) {
  const [value, setValue] = useState('');

  const onChange = (e: React.ChangeEvent&amp;lt;HTMLInputElement&amp;gt;) =&amp;gt; {
    setValue(e.target.value);
  }

  const onSubmit = (e: FormEvent) =&amp;gt; {
    e.preventDefault();
    onInsert(value);
    setValue('');
  }

  return (
    &amp;lt;form onSubmit={onSubmit}&amp;gt;
      &amp;lt;input value={value} onChange={onChange} placeholder=&quot;할 일을 입력하세요.&quot;&amp;gt;
      &amp;lt;button type=&quot;submit&quot;&amp;gt;등록하기&amp;lt;/button&amp;gt;
    &amp;lt;/form&amp;gt;
  )
}

export default TodoInsert;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;todolisttsx&quot;&gt;TodoList.tsx&lt;/h4&gt;

&lt;p&gt;전체적인 게시판을 관리하는 Component&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import React from 'react';
import { Todo } from '../modules/todos';
import TodoItem from './TodoItem';

type TodoListProps = {
  todos: Todo[];
  onToggle: (id: number) =&amp;gt; void;
  onRemove: (id: number) =&amp;gt; void;
}

function TodoList({todos, onToggle, onRemove}: TodoListProps) {
  if(todos.length === 0) return &amp;lt;p&amp;gt;등록된 항목이 없습니다.&amp;lt;/p&amp;gt;
  return (
    &amp;lt;ul&amp;gt;
      {todos.map(todo) =&amp;gt; (&amp;lt;TodoItem todo={todo} onToggle={onToggle} onRemove={onRemove}&amp;gt;)}
    &amp;lt;/ul&amp;gt;
  )
}

export default TodoList;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;todoitemtsx&quot;&gt;TodoItem.tsx&lt;/h4&gt;

&lt;p&gt;할 일을 하나하나 관리하는 Component&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import React, { CSSProperties } from 'react';
import { Todo } from '../modlues/todos';

type TodoItemProps = {
  todo: Todo;
  onToggle: (id: number) =&amp;gt; void;
  onRemove: (id: number) =&amp;gt; void;

  function TodoItem({todo, onToggle, onRemove}: TodoItemProps) {
    const handleToggle = () =&amp;gt; onToggle(todo.id);
    const handleRemove = () =&amp;gt; onRemove(todo.id);

    const textStyle: CSSProperties = {
      textDecoration: todo.done ? 'line-through' : 'none',
    }

    const removeStyle: CSSProperties = {
      color: 'red',
      marginLeft: 8,
    }

    return (
      &amp;lt;li&amp;gt;
        &amp;lt;span onClick={handleToggle} style={textStyle}&amp;gt;
          {todo.text}
        &amp;lt;/span&amp;gt;
        &amp;lt;span onClick={handleRemove} style={removeStyle}&amp;gt;
          X
        &amp;lt;/span&amp;gt;
      &amp;lt;/li&amp;gt;
    )
  }
}

export default TodoItem;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;벨로퍼티님의 강의를 보고 나름 정리를 해보았다.&lt;br /&gt;
TypeScript 문법이 익숙하지 않았지만 계속 따라 쳐보고 생각하다 보니깐
어느 순간 손이 자동으로 움직이기 시작했고, 확실히 처음 공부를 한 것 보다
문법에 대한 이해도나 습득력이 늘었다고 해야하나? 다른 언어를 배우더라도 겁 내지 않고
할 수 있겠다 라는 생각을 가지고 다가갈 수 있을 것 같다.&lt;/p&gt;</content><author><name>SungSeokMin</name><email>jkl154527@gmail.com</email></author><category term="frontend" /><category term="react-typescript" /><summary type="html">React에서 TypeScript 사용하기 + Redux</summary></entry><entry><title type="html">TypeScript</title><link href="https://sungseokmin.github.io/frontend/typescript/typescript/" rel="alternate" type="text/html" title="TypeScript" /><published>2021-02-17T00:00:00+09:00</published><updated>2021-02-17T00:00:00+09:00</updated><id>https://sungseokmin.github.io/frontend/typescript/typescript</id><content type="html" xml:base="https://sungseokmin.github.io/frontend/typescript/typescript/">&lt;blockquote&gt;
  &lt;h2 id=&quot;typescript-&quot;&gt;TypeScript ?&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;JavaScript를 기반으로 한 언어로써 JavaScript에서 유요한 코드는 TypeScript에서도 유효하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;타입-추론type-inference&quot;&gt;타입 추론(Type Inference)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;TypeScript에서는 타입 표기가 없는 경우 자체에서 코드를 읽고 분석하여 타입을 유추해낼 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img width=&quot;526&quot; alt=&quot;스크린샷 2021-02-17 오전 11 17 55&quot; src=&quot;https://user-images.githubusercontent.com/72539723/108147326-f98bbf00-7111-11eb-877e-636402e29ca2.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;타입-명시&quot;&gt;타입 명시&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;변수를 선언할 때, 변수 값의 타입을 명시함으로써 변수 값의 데이터 타입을 지정하는 것&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img width=&quot;614&quot; alt=&quot;스크린샷 2021-02-17 오전 11 36 40&quot; src=&quot;https://user-images.githubusercontent.com/72539723/108148564-6902ae00-7114-11eb-9481-a32cf645f849.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;interface&quot;&gt;interface&lt;/h3&gt;

&lt;p&gt;타입으로 사용되는 interface&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;interface에 정의된 변수가 전부 return되어야 한다면 ?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img width=&quot;472&quot; alt=&quot;스크린샷 2021-02-17 오전 11 49 22&quot; src=&quot;https://user-images.githubusercontent.com/72539723/108149428-2e9a1080-7116-11eb-9360-ad352c61f9b2.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;interface에 정의는 했지만 return을 안 하고 싶다면 ?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img width=&quot;473&quot; alt=&quot;스크린샷 2021-02-17 오전 11 49 40&quot; src=&quot;https://user-images.githubusercontent.com/72539723/108149446-38bc0f00-7116-11eb-8d4f-9e06b388dde5.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;enum--literal-type&quot;&gt;Enum &amp;amp; Literal Type&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Enum&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img width=&quot;518&quot; alt=&quot;스크린샷 2021-02-17 오후 12 40 08&quot; src=&quot;https://user-images.githubusercontent.com/72539723/108152846-46c15e00-711d-11eb-8d75-4cd528d95eb2.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Literal&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img width=&quot;522&quot; alt=&quot;스크린샷 2021-02-17 오후 12 40 40&quot; src=&quot;https://user-images.githubusercontent.com/72539723/108152897-58a30100-711d-11eb-9cc2-894e78b5843d.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;✔️ Literal Type이 가독성이 좋아 많이 사용한다고 한다!!&lt;/p&gt;

&lt;h3 id=&quot;type-aliases&quot;&gt;Type Aliases&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;변수의 타입이 string이 올 수도 있고 number 또는 어떠한 타입이 올 수 있는 경우 가독성을 위하여 사용한다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ex) string이거나 number일 경우
type StrOrNum = string | number;

// 원래 같았으면 오류가 나겠지만 위의 Aliases 덕분에 오류가 나지 않는다
const WeDontKnow : StrOrNum = 'string 타입 입니다';
WeDontKnow : StrOrNum = 'number 타입 입니다';
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;접근제한자access-modifiers&quot;&gt;접근제한자(Access Modifiers)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;public : 어디서든 접근 가능, default&lt;/li&gt;
  &lt;li&gt;private : class 내부에서만 접근 가능&lt;/li&gt;
  &lt;li&gt;protected : class 내부, 상속받은 자식 class에서 접근 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;tsctypescript-compiler-사용&quot;&gt;tsc(typescript compiler) 사용&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;app.js 파일 생성&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function info(name: string) {
  console.log(name);
}

name('성석민');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;터미널을 실행 시킨 후 다음과 같은 명령 실행&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// tsc ? typescript compiler
// 자동으로 app.js 파일을 생성해준다. typescript -&amp;gt; javascript
tsc app.ts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;app.ts 파일을 보면 Duplicate function implementation 오류가 발생&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;이것을 해결하기 위한 방법은 터미널을 실행 시킨 후 다음과 같은 명령 실행&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tsc --init

-&amp;gt; tsconfig.json 파일이 생성된다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;app.ts에서 코드를 삭제 후 app.js파일에 가보면 코드가 그대로 남아있는 것을 볼 수 있다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;이것을 해결하기 위한 방법은 터미널을 실행 시킨 후 다음과 같은 명령 실행&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// w = watch (감시한다!!)
tsc -w
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>SungSeokMin</name><email>jkl154527@gmail.com</email></author><category term="frontend" /><category term="typescript" /><summary type="html">TypeScript ?</summary></entry><entry><title type="html">2 weeks project_시연영상</title><link href="https://sungseokmin.github.io/project/2%20weeks%20project/Project-2/" rel="alternate" type="text/html" title="2 weeks project_시연영상" /><published>2021-02-15T00:00:00+09:00</published><updated>2021-02-15T00:00:00+09:00</updated><id>https://sungseokmin.github.io/project/2%20weeks%20project/Project-2</id><content type="html" xml:base="https://sungseokmin.github.io/project/2%20weeks%20project/Project-2/">&lt;blockquote&gt;
  &lt;p&gt;Login&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/72539723/107925933-6c812280-6fb8-11eb-80bf-9fee727c6636.gif&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;SignUp&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/72539723/107925939-6db24f80-6fb8-11eb-9624-8406f4be996d.gif&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;TempLogin&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/72539723/107925945-6e4ae600-6fb8-11eb-9b30-0f5101efe70d.gif&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Capture &amp;amp; Clear&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/72539723/107925949-730f9a00-6fb8-11eb-98e3-623c1377db11.gif&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;AddBoard&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/72539723/107925953-7440c700-6fb8-11eb-8699-a48cac405337.gif&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;BoardDetail&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/72539723/107925956-760a8a80-6fb8-11eb-8768-12c43147a38a.gif&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;MyPage&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/72539723/107925961-77d44e00-6fb8-11eb-8bb6-f019a9943fa2.gif&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Logout&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/72539723/107925967-799e1180-6fb8-11eb-8056-27ad72c88182.gif&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;</content><author><name>SungSeokMin</name><email>jkl154527@gmail.com</email></author><category term="project" /><category term="2 weeks project" /><summary type="html">Login</summary></entry><entry><title type="html">Redux</title><link href="https://sungseokmin.github.io/frontend/redux/Redux/" rel="alternate" type="text/html" title="Redux" /><published>2021-02-15T00:00:00+09:00</published><updated>2021-02-15T00:00:00+09:00</updated><id>https://sungseokmin.github.io/frontend/redux/Redux</id><content type="html" xml:base="https://sungseokmin.github.io/frontend/redux/Redux/">&lt;blockquote&gt;
  &lt;h2 id=&quot;redux&quot;&gt;Redux&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;action : store(저장소)로 data를 보내는 방법&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// actions -&amp;gt; index.js

export const LOGIN = 'LOGIN';
export const LOGOUT = 'LOGOUT';

export const login = () =&amp;gt; {
  return {
    type: LOGIN,
    payload : (생략가능)
  }
}

export const logout = () =&amp;gt; {
  return {
    type: LOGOUT,
    payload : (생략가능)
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Reducers : action을 통해 타입을 정의 했으면, 그 결과로 인해 상태를 어떻게 바꿀 것인지 정의하는 함수&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// reducers -&amp;gt; userReducer.js

import { LOGIN, LOGOUT } from '../actions';

const initalState = {...};

                    // es6 문법, default값 선언
const userReducer = (state = initialState, action ) =&amp;gt; {
  switch(action.type) {
    case LOGIN:
    return {
      ...
    }
    case LOGOUT:
    return {
      ...
    }
    default:
      return state;
  }
}

export default userReducer;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;store : state를 저장하는 객체&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// store -&amp;gt; store.js

import {createStore} from 'redux';
import userReducer from '../reducers/userReducer';

export const store = createStore(userReducer);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Provider : 하위 컴포넌트에게 store에 관련한 모든 것들에 대한 접근을 허용&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// index.js

import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import store from './store/store';
import { Provider } from 'react-redux';
import * as serviceWorker from './serviceWorker';

ReactDOM.render(
  ⭐️&amp;lt;Provider store={store}&amp;gt;⭐️ // 모든 component를 Provider로 감싸주고 store를 넘겨준다.
    &amp;lt;App /&amp;gt;
  &amp;lt;/Provider&amp;gt;,
  document.getElementById('root')
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;react-hooks를-이용한-component와-redux-연결&quot;&gt;React hooks를 이용한 Component와 Redux 연결&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { useDispatch, useSelector } from 'react-redux';
import { login, logout } from './actions';

const state = useSelector(state =&amp;gt; state.userReducer);

const dispatch = useDispatch();

dispatch(login(인자&amp;lt;없을 경우 생략&amp;gt;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;… 추후 업데이트 예정 …&lt;/p&gt;</content><author><name>SungSeokMin</name><email>jkl154527@gmail.com</email></author><category term="frontend" /><category term="redux" /><summary type="html">Redux</summary></entry><entry><title type="html">FlexBox</title><link href="https://sungseokmin.github.io/frontend/flexbox/Flex/" rel="alternate" type="text/html" title="FlexBox" /><published>2021-02-03T00:00:00+09:00</published><updated>2021-02-03T00:00:00+09:00</updated><id>https://sungseokmin.github.io/frontend/flexbox/Flex</id><content type="html" xml:base="https://sungseokmin.github.io/frontend/flexbox/Flex/">&lt;blockquote&gt;
  &lt;h3 id=&quot;flexbox-부모-속성&quot;&gt;FlexBox (부모 속성)&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;flex-direction: 주축 - 기본 값 : row&lt;br /&gt;
flex-wrap : 창의 너비에 따라 줄 바꿈 - 기본 값 : nowrap&lt;br /&gt;
justify-content : 중심축과 기준으로 정렬 - 기본 값 : flex-start&lt;br /&gt;
align-itmes : 교차축을 기준으로 정렬 - 기본 값 : flex-start&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;가로로-정렬된-모습을-볼-수-있다&quot;&gt;가로로 정렬된 모습을 볼 수 있다.&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/flexbox.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;display: flex;
flex-direction: row; // default값이기 때문에 적어주지 않아도 된다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;세로로-정렬된-모습을-볼-수-있다&quot;&gt;세로로 정렬된 모습을 볼 수 있다.&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/column.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;display: flex;
flex-direction: column;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;가로-축을-기준으로-가운데로-정렬된-모습을-볼-수-있다&quot;&gt;가로 축을 기준으로 가운데로 정렬된 모습을 볼 수 있다.&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/justify-content_center.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;display: flex;
flex-direction: row; // default값이기 때문에 적어주지 않아도 된다.
justify-content: center
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;가로-축을-기준으로-양-옆-공백-없는-사이에-간격을-둔-모습을-볼-수-있다&quot;&gt;가로 축을 기준으로 양 옆 공백 없는, 사이에 간격을 둔 모습을 볼 수 있다.&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/justify-content_between.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;display: flex;
flex-direction: row; // default값이기 때문에 적어주지 않아도 된다.
justify-content: space-between
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;가로-축을-기준으로-양-옆-공백이-있는-사이에-간격을-둔-모습을-볼-수-있다&quot;&gt;가로 축을 기준으로 양 옆 공백이 있는, 사이에 간격을 둔 모습을 볼 수 있다.&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/justify-content_around.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;display: flex;
flex-direction: row; // default값이기 때문에 적어주지 않아도 된다.
justify-content: space-around
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;세로-축을-기준으로-가운데-정렬된-모습을-볼-수-있다&quot;&gt;세로 축을 기준으로 가운데 정렬된 모습을 볼 수 있다.&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/center.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;display: flex;
flex-direction: column;
align-items: center;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;가로축을-기준으로-중앙으로-정렬된-모습을-볼-수-있다&quot;&gt;가로축을 기준으로 중앙으로 정렬된 모습을 볼 수 있다.&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/align-item.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;display: flex;
flex-direction: column
justify-content: center;
align-items: center;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;세로축을-기준으로-중앙으로-정렬된-모습을-볼-수-있다&quot;&gt;세로축을 기준으로 중앙으로 정렬된 모습을 볼 수 있다.&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/middle.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;display: flex;
flex-direction: row;
justify-content: center;
align-items: center;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;flexbox-자식-속성&quot;&gt;FlexBox (자식 속성)&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;flex-basis&quot;&gt;flex-basis&lt;/h4&gt;

&lt;p&gt;기본 너비 설정, 기본 값: auto&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;flex-grow&quot;&gt;flex-grow&lt;/h4&gt;

&lt;p&gt;item의 증가 너비 비율 설정 &amp;amp;&amp;amp; 콘텐츠가 없는 여백의 공간을 비율적으로 나눠 가진다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/grow.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.container {
height: 100vh;
background-color: gray;
display: flex;
flex-direction: row;
align-items: flex-start;
}
.item1 {
flex-grow: 1;
background-color: pink;
}
.item2 {
flex-grow: 2;
background-color: green;
}
.item3 {
flex-grow: 1;
background-color: yellow;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;flex-shrink&quot;&gt;flex-shrink&lt;/h4&gt;

&lt;p&gt;item의 감소 너비 비율을 설정&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;창 너비를 줄였을 때 1:2:1 비율로 줄어든다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/shrink.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.container {
height: 100vh;
background-color: gray;
display: flex;
flex-direction: row;
align-items: flex-start;
}
.item1 {
flex-shrink: 1;
background-color: pink;
}
.item2 {
flex-shrink: 2;
background-color: green;
}
.item3 {
flex-shrink: 1;
background-color: yellow;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;align-self&quot;&gt;align-self&lt;/h4&gt;

&lt;p&gt;각각의 요소를 설정할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/align-self.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.container {
height: 100vh;
background-color: gray;
display: flex;
flex-direction: row;
align-items: flex-start;
}
.item1 {
flex: 1;
align-self: flex-start;
background-color: pink;
}
.item2 {
flex: 1;
align-self: center;
background-color: green;
}
.item3 {
flex: 1;
align-self: flex-end;
background-color: yellow;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>SungSeokMin</name><email>jkl154527@gmail.com</email></author><category term="frontend" /><category term="flexbox" /><summary type="html">FlexBox (부모 속성)</summary></entry><entry><title type="html">2 weeks project</title><link href="https://sungseokmin.github.io/project/2%20weeks%20project/Project-1/" rel="alternate" type="text/html" title="2 weeks project" /><published>2021-02-01T00:00:00+09:00</published><updated>2021-02-01T00:00:00+09:00</updated><id>https://sungseokmin.github.io/project/2%20weeks%20project/Project-1</id><content type="html" xml:base="https://sungseokmin.github.io/project/2%20weeks%20project/Project-1/">&lt;blockquote&gt;
  &lt;h2 id=&quot;shape-of-voice&quot;&gt;Shape Of Voice&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;사람의 목소리 파동을 이용해 채도, 명도, 색을 다르게 나타내는 이미지를 생성하는 웹&lt;/p&gt;

&lt;h3 id=&quot;schema&quot;&gt;schema&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;user : 각 유저들의 정보&lt;/li&gt;
  &lt;li&gt;voice : 목소리에 대한 정보&lt;/li&gt;
  &lt;li&gt;board : 게시글에 대한 정보&lt;/li&gt;
  &lt;li&gt;voice_board : voice table과 board table의 join table&lt;/li&gt;
  &lt;li&gt;user_board_like : 특정 user가 어떠한 게시판의 좋아요를 눌렀는지에 대한 table
&lt;img src=&quot;/img/schema.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;wire-frame&quot;&gt;Wire frame&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/wireframe.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;flowchart&quot;&gt;Flowchart&lt;/h3&gt;

&lt;h4 id=&quot;client&quot;&gt;client&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/client_flowchart.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;server&quot;&gt;server&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/server_flowchart_2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;api&quot;&gt;API&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://app.gitbook.com/@cloudacesending/s/shapeofvoice/&quot;&gt;ShapeOfVoice API Documents&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;진행하면서-겪은-상황&quot;&gt;진행하면서 겪은 상황&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;sequelize의-many-to-many를-설정해주는-데-어려움을-겪었다&quot;&gt;sequelize의 Many To Many를 설정해주는 데 어려움을 겪었다.&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;공식문서, 블로그 에서는 아래와 같은 글들이 있었다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ex)
voice.belongsToMany(board, { through: 'voice_board'});
board.belongsToMany(voice, { through: 'voice_board'});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;models &amp;gt; index.js에서 console.log(sequelize.models)한 결과 voice_board테이블은
있었지만 데이터베이스에서는 없었다.&lt;/p&gt;

&lt;p&gt;❗️여기서 migrations폴더에 voice_board를 만들어주는 파일이 없는데 안 만들어지는 게 당연하지 않을까 ? 라는 생각을 했다.&lt;/p&gt;

&lt;p&gt;팀원과 의견을 합쳐 하나 둘 씩 해결하기 시작…&lt;/p&gt;

&lt;h5 id=&quot;해결-방법&quot;&gt;해결 방법&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;migration폴더에 voice_board 테이블을 생성하는 파일을 만들자 !&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npx migration:generate --name voice_board
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;voiceId와 boardId를 만들어 각각 voice테이블의 id와 board테이블의 id를 참조시켜주자 !&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module.exports = {
  up: async (queryInterface, Sequelize) =&amp;gt; {
    await queryInterface.createTable('voice_board', {
      id: {
        allowNull: false,
        autoIncrement: true,
        primaryKey: true,
        type: Sequelize.INTEGER,
      },
      voiceId: {
        type: Sequelize.INTEGER,
        references: { model: 'voices', key: 'id' },
        onDelete: 'CASCADE',
      },
      boardId: {
        type: Sequelize.INTEGER,
        references: { model: 'boards', key: 'id' },
        onDelete: 'CASCADE',
      },
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE,
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE,
      },
    });
  },

  down: async (queryInterface, Sequelize) =&amp;gt; {
    await queryInterface.dropTable('voice_board');
  },
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;modles폴더 안에 있는 board, voice파일의 associate 안에 내용을 추가해주자 !&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;board.belongsToMany(models.voice, {
        through: 'voice_board',
      });
voice.belongsToMany(models.board, {
        through: 'voice_board',
      });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;결과&quot;&gt;결과&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/result.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;잘 해결 되었다!!&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;sequelize-include를-이용한-join&quot;&gt;sequelize include를 이용한 JOIN&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;sql문법에서는 join을 사용해 해결이 가능했지만 sequelize 문법은 익숙하지 않아 힘들었다.&lt;/li&gt;
  &lt;li&gt;json형식의 데이터를 가공하는 일은 쉽지 않았다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;해결방법&quot;&gt;해결방법&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;include를 이용해서 해결할 수 있었다.
&lt;img src=&quot;/img/include.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;server에서 가공처리를 해주지 않고 client에서 가공처리를 해주었다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/map.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;느낀점&quot;&gt;느낀점&lt;/h3&gt;

&lt;p&gt;문법을 익히는데 시간이 오래 걸리긴 했지만(완벽X) 알아가는 재미가 있다.&lt;br /&gt;
가공하는 방법에서는 충분한 scope의 이해가 필요했다. &lt;br /&gt;
많은 시간을 공들여 팀원과 함께 찾아낸 방법! 앞으로도 유용하게 쓰일 것 같다👍&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;redux-사용&quot;&gt;Redux 사용&lt;/h4&gt;

&lt;p&gt;Redux를 사용해보긴 했지만 실질적으로 프로젝트에서 사용한 적이 없었다. &lt;br /&gt;
막상 Redux를 이용해 state를 관리하려고 했을 때 action, reducer, store등 처음 보는 듯한
문법 이였고 활용을 할 수 없어 어려움을 겪었다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:4000/frontend/redux/Redux/&quot;&gt;Redux&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;</content><author><name>SungSeokMin</name><email>jkl154527@gmail.com</email></author><category term="project" /><category term="2 weeks project" /><summary type="html">Shape Of Voice</summary></entry><entry><title type="html">Express</title><link href="https://sungseokmin.github.io/backend/express/Express-backend/" rel="alternate" type="text/html" title="Express" /><published>2021-01-31T00:00:00+09:00</published><updated>2021-01-31T00:00:00+09:00</updated><id>https://sungseokmin.github.io/backend/express/Express-backend</id><content type="html" xml:base="https://sungseokmin.github.io/backend/express/Express-backend/">&lt;blockquote&gt;
  &lt;h2 id=&quot;express-&quot;&gt;Express ?&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://expressjs.com/ko/&quot;&gt;공식문서&lt;/a&gt; 참고&lt;/li&gt;
  &lt;li&gt;Node.js를 위한 빠르고 대중적인 프레임워크&lt;/li&gt;
  &lt;li&gt;Middleware를 사용할 수 있다는 큰 장점을 가지고 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;설치-방법&quot;&gt;설치 방법&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install express
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;express를-이용한-server-구현&quot;&gt;express를 이용한 server 구현&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// express 모듈을 가져온다.
const express = require('express');
const app = express();

app.get('/', (request, response) =&amp;gt; {
  res.send('Hello World');
})

app.listen(3000, () =&amp;gt; {
  console.log('Express Start')
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;routing&quot;&gt;Routing&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;method(GET, POST, PUT, DELETE …)와 url에 따른 분기&lt;/li&gt;
  &lt;li&gt;즉, url 및 특정 HTTP 요청 메소드인 엔드포인트(ex… ‘/mypage’)에 대한 client 요청에 application이 응답하는 방법을 결정하는 것&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const express = require('express');
const app = express();

// http://localhost:3000/ 경로로 이동할 경우 화면에 Hello가 출력된다.
app.get('/', (req, res) =&amp;gt; {
  res.status(200).send('Hello');
})

app.get('/mypage', (req,res) =&amp;gt; {
  res.status(200).send('MyPage');
})

app.post('경로', (req, res) =&amp;gt; {
  TODO :
})

app.delete('경로', (req, res) =&amp;gt; {
  TODO :
})

app.listen(3000, () =&amp;gt; {
  console.log('Express Start')
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;middleware&quot;&gt;Middleware&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;요청과 응답 중간에 껴서 어떠한 동작을 실행해주는 프로그램&lt;/li&gt;
  &lt;li&gt;대표적인 Middleware
    &lt;ul&gt;
      &lt;li&gt;morgan : request를 loggin 해주는 미들웨어&lt;/li&gt;
      &lt;li&gt;cors : 현재 도메인에서 다른 도메인으로 리소스 요청 할 경우 제한을 정해주는 미들웨어
        &lt;ul&gt;
          &lt;li&gt;Cross Origin Resource Sharing의 약자&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;express-session : 서버가 세션을 이용하게 해주고 쿠키에 세션 정보를 담을 수 있게 해주는 미들웨어&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;설치-방법-1&quot;&gt;설치 방법&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install morgan
npm install cors
npm install express-session
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;사용-방법&quot;&gt;사용 방법&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const express = require('express');
const app = express();
const morgan = require('morgan');
const cors = require('cors');
const session = require('express-session');

// 요청에 대한 본문을 해석해주는 미들웨어
app.use(express.json());

// post로 요청된 body를 쉽게 추출할 수 있는 미들웨어
app.use(express.urlencoded({extended: false}));

// morgan 미들웨어 사용
app.use(logger('dev'));

// cors 미들웨어 사용
app.use(
  cors({
    origin: 'https://localhost:3000',
    methods: ['GET', 'POST', 'UPDATE', 'OPTIONS'],
    credentials: true,
  })
);

// express-session 미들웨어 사용
app.use(session({
  secret: **필수항목** 비밀 키
  resave: false,
  saveUninitialized: false,
  cookie: {
    // 서버와 요청의 도메인이 일치하는 경우 쿠키 전송
    domain: 'localhost',

    // 서버의 요청의 세부경로가 일치하는 경우 쿠키 전송
    path: '/',

    // maxAge, expires =&amp;gt; 쿠키의 유효기간 설정
    maxAge: 24 * 6 * 60,

    // 스크립트의 쿠키 접근 가능 여부 설정
    httpOnly: true,

    // HTTPS에서만 쿠키 전송 여부 설정
    secure: true,

    // CORS 요청의 경우, 옵션 및 메소드에 따라 쿠키 전송 여부 설정
    sameSite: 'none'
  }
}))

app.listen(3000, () =&amp;gt; {
  console.log('Express Start');
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>SungSeokMin</name><email>jkl154527@gmail.com</email></author><category term="backend" /><category term="Express" /><summary type="html">Express ?</summary></entry><entry><title type="html">HTTP</title><link href="https://sungseokmin.github.io/backend/http/HTTP-backend/" rel="alternate" type="text/html" title="HTTP" /><published>2021-01-31T00:00:00+09:00</published><updated>2021-01-31T00:00:00+09:00</updated><id>https://sungseokmin.github.io/backend/http/HTTP-backend</id><content type="html" xml:base="https://sungseokmin.github.io/backend/http/HTTP-backend/">&lt;blockquote&gt;
  &lt;h2 id=&quot;http-&quot;&gt;HTTP ?&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;웹 상에서 client와 server 간에 요청/응답으로 데이터를 주고 받을 수 있는 프로토콜&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;작동방식&quot;&gt;작동방식&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;client -&amp;gt; (요청) -&amp;gt; server&lt;/li&gt;
  &lt;li&gt;Server -&amp;gt; (응답) -&amp;gt; client&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;특징&quot;&gt;특징&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;stateless(무상태성) : 이전 요청이나 다음 요청을 기억하지 않는다.
    &lt;ul&gt;
      &lt;li&gt;ex) client가 server에게 고기를 먹으러 가자고 요청을 보내자 server는 알겠다고 응답을 한다.&lt;/li&gt;
      &lt;li&gt;응답을 받은 client는 언제갈까 라고 server에게 요청을 보내지만 server는 무엇을? 이라는 응답을 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;connectionless(무연결성) : 한번의 요청에는 한번의 응답을 한다.
    &lt;ul&gt;
      &lt;li&gt;ex) client가 server에게 뭐해?, 바빠?, 어디갈까? 라는 요청을 한번에 보낼 수 없다는 뜻!!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;메소드&quot;&gt;메소드&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;GET : 서버로부터 정보를 조회하기 위해 설계된 메소드
    &lt;ul&gt;
      &lt;li&gt;브라우저에서 웹페이지를 열거나 게시물을 읽는 등 조회하는 행위는 GET 요청&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;POST : 기존에 없던 리소스를 생성/변경하기 위해 설계된 메소드
    &lt;ul&gt;
      &lt;li&gt;기존에 없던 게시글을 작성하는 행위 등은 POST 요청&lt;/li&gt;
      &lt;li&gt;데이터가 Body로 전송된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;PUT : 기존에 있던 리소스를 변경하기 위해 설계된 메소드
    &lt;ul&gt;
      &lt;li&gt;기존에 있던 게시글을 수정하는 행위 등은 PUT 요청&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DELETE : 리소스를 삭제하기 위해 설계된 메소드
    &lt;ul&gt;
      &lt;li&gt;게시글 삭제&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;OPTIONS, TRACE, CONNECT …&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;get-post의-차이&quot;&gt;GET, POST의 차이&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;GET은 서버에게 동일한 요청을 여러 번 전송하더라도 동일한 응답이 돌아와야 하고
    &lt;ul&gt;
      &lt;li&gt;서버의 데이터나 상태를 변경시키지 않아야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;POST는 서버에게 동일한 요청을 여러 번 전송해도 응답이 항상 다를 수 있다.
    &lt;ul&gt;
      &lt;li&gt;서버의 데이터나 상태를 변경 시킬 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;http-header&quot;&gt;HTTP HEADER&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/httpheader.png&quot; alt=&quot;Headers&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;response-status&quot;&gt;Response Status&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/request_status.png&quot; alt=&quot;응답코드&quot; /&gt;&lt;/p&gt;</content><author><name>SungSeokMin</name><email>jkl154527@gmail.com</email></author><category term="backend" /><category term="http" /><summary type="html">HTTP ?</summary></entry><entry><title type="html">Node.js</title><link href="https://sungseokmin.github.io/backend/node/Node-backend/" rel="alternate" type="text/html" title="Node.js" /><published>2021-01-31T00:00:00+09:00</published><updated>2021-01-31T00:00:00+09:00</updated><id>https://sungseokmin.github.io/backend/node/Node-backend</id><content type="html" xml:base="https://sungseokmin.github.io/backend/node/Node-backend/">&lt;blockquote&gt;
  &lt;h2 id=&quot;nodejs-&quot;&gt;Node.js ?&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;V8 JavaScript 엔진으로 빌드된 JavaScript 런타임&lt;/li&gt;
  &lt;li&gt;즉, 브라우저 외의 다른 환경에서도 사용할 수 있게 해주는 런타임&lt;/li&gt;
  &lt;li&gt;module 시스템을 구축하고 있다.&lt;/li&gt;
  &lt;li&gt;http server가 내장되어 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;설치-방법&quot;&gt;설치 방법&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;'https://nodejs.org'&quot;&gt;공식사이트&lt;/a&gt;를 통해 파일을 다운 받을 수 있다.&lt;/li&gt;
  &lt;li&gt;node가 설치되면 npm(Node Package Manager)가 같이 설치 된다.&lt;/li&gt;
  &lt;li&gt;설치가 되면 터미널을 켠 후 node -v와 npm -v를 입력해본다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;npm-&quot;&gt;npm ?&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;패키지를 모아놓은 저장소, 이미 만들어져 있는 패키지들을 사용할 수 있게 해주는 도구&lt;/li&gt;
  &lt;li&gt;패키지들을 체계적으로 관리하기 위해서 package.json을 생성한다. 패키지명, 패키지 버전을 기록한다.&lt;/li&gt;
  &lt;li&gt;package.json 생성방법
    &lt;ul&gt;
      &lt;li&gt;npm init&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;npm install [package Name]을 이용해 패키지들을 다운 받을 수 있다.
    &lt;ul&gt;
      &lt;li&gt;ex) npm install express&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;packagejson-&quot;&gt;package.json ?&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;패캐지들을 체계적으로 관리하기 위해서 필요한 파일&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dependencies-devdependencies&quot;&gt;dependencies, devDependencies&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;dependencies ?
    &lt;ul&gt;
      &lt;li&gt;프로젝트에 필요한 패키지들의 이름과 버전을 기록
        &lt;ul&gt;
          &lt;li&gt;ex) express, cors, sequelize, mysql2 …&lt;/li&gt;
          &lt;li&gt;설치) npm install express&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;devDependencies ?
    &lt;ul&gt;
      &lt;li&gt;프로젝트 개발에 필요한 패캐지들의 이름과 버전을 기록
        &lt;ul&gt;
          &lt;li&gt;ex) nodemon, eslint, prettier …&lt;/li&gt;
          &lt;li&gt;설치) npm install nodemon –save-dev&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;server-구현&quot;&gt;server 구현&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// http 모듈을 불러온다.
const http = require('http');
const url = require('url');

// http://localhost:3000 확인 가능
http.createServer((request, response) =&amp;gt; {

  // user가 요청한 url에서 path를 가져온다.
  const path = url.parse(request.url, true).pathname;

  // user가 요청한 method가 GET, POST, 그 외 일 경우
  if(request.method === 'GET') {
    // path가 /일 경우
    if(path === '/') {
      ...
    }
  } else if(request.method === 'POST') {
    ...
  } else {
    ...
  }

}).listen(3000);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>SungSeokMin</name><email>jkl154527@gmail.com</email></author><category term="backend" /><category term="node" /><summary type="html">Node.js ?</summary></entry><entry><title type="html">React</title><link href="https://sungseokmin.github.io/frontend/react/React-frontend/" rel="alternate" type="text/html" title="React" /><published>2021-01-31T00:00:00+09:00</published><updated>2021-01-31T00:00:00+09:00</updated><id>https://sungseokmin.github.io/frontend/react/React-frontend</id><content type="html" xml:base="https://sungseokmin.github.io/frontend/react/React-frontend/">&lt;blockquote&gt;
  &lt;h2 id=&quot;react-&quot;&gt;React ?&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;페이스북이 만든 라이브러리&lt;/li&gt;
  &lt;li&gt;JSX : javascript 확장 언어&lt;/li&gt;
  &lt;li&gt;MVC pattern 중 V(View)를 담당한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;특징&quot;&gt;특징&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;반드시 하나의 엘리먼트로 감싸야한다.&lt;/li&gt;
  &lt;li&gt;javascript 코드를 적용하고 싶을 때는 {} 안에 작성한다.&lt;/li&gt;
  &lt;li&gt;JSX 내부에서는 if문 대신 삼함연산자를 사용한다.&lt;/li&gt;
  &lt;li&gt;Component System
    &lt;ul&gt;
      &lt;li&gt;Component : 웹을 잘게 잘게 쪼갠 것
        &lt;ul&gt;
          &lt;li&gt;독립적 기능, 재사용 가능&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;조건부-렌더링&quot;&gt;조건부 렌더링&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;JSX 문법 에서는 삼항연산자를 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  1+1 === 2 ? (&amp;lt;div&amp;gt;정답&amp;lt;/div&amp;gt;) : (&amp;lt;div&amp;gt;오답&amp;lt;/div&amp;gt;)

  // 조건이 true일 때만 보여준다.
  1+1 === 2 &amp;amp;&amp;amp; (&amp;lt;div&amp;gt;정답&amp;lt;/div&amp;gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;설치-방법&quot;&gt;설치 방법&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;터미널을 켜고 다음과 같이 수행&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npx create-react-app [폴더 이름]
cd [폴더 이름]

// 실행
npm start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;function-component-vs-class-component&quot;&gt;function Component VS class Component&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Component : JavaScript 함수와 유사하며, 화면에 어떻게 표시되는지를 기술하는 React 엘리먼트를 반환한다.&lt;/li&gt;
  &lt;li&gt;props : 부모 Component로부터 물려받은 속성
    &lt;ul&gt;
      &lt;li&gt;순수 함수처럼 작동해야한다.
        &lt;ul&gt;
          &lt;li&gt;순수 함수 : 입력값을 바꾸려 하지 않고 항상 동일한 입력값에 대해 동일한 결과를 반환해야 한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;state : 해당 Component에서 사용할 수 있는 상태&lt;/li&gt;
  &lt;li&gt;state는 직접적인 수정이 불가능하다!! 반드시 setState를 통해 state의 값을 변경해준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;function-component&quot;&gt;function Component&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function Login(props) {
  return &amp;lt;h1&amp;gt;로그인 화면&amp;lt;/h1&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;class-component&quot;&gt;class Component&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Login exntends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      id = 'sung';    // 직접 수정 불가 !! 변경하려면 아래와 같이 setState를 사용해야 한다.
    };
  }

  changeId = () =&amp;gt; {
    this.setState({id: 'seok'});
  }

  render() {
    return &amp;lt;h1&amp;gt;로그인 화면&amp;lt;h1&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;흐름을-이해해보세요-&quot;&gt;흐름을 이해해보세요 !&lt;/h3&gt;

&lt;p&gt;index.js&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import React, {Component} from 'react';
import Mypage from './Mypage.js' // .js는 생략 가능

class App extends Component {
  constructor(props) {
    super(props);

    // id, age, hobby라는 state(상태)를 가지고 있다.
    this.setState = {
      id : 'sung',
      age : 27,
      hobby: 'coding'
    }
  }

  render() {
    return &amp;lt;div&amp;gt;      // id와 age라는 이름으로 Mypage 컴포넌트로 props를 전달
      &amp;lt;Mypage id={this.state.id} age={this.state.age} /&amp;gt;
    &amp;lt;/div&amp;gt;
  }
}

export default App;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;mypage.js&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import React from 'react'

// 구조분해할당으로 값을 받아올 수 있다.
const Mypage = ({id, age}) =&amp;gt; {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;div&amp;gt;{id}&amp;lt;/div&amp;gt;
      &amp;lt;div&amp;gt;{age}&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}

또는

const Mypage = (props) =&amp;gt; {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;div&amp;gt;{this.props.id}&amp;lt;/div&amp;gt;
      &amp;lt;div&amp;gt;{this.props.age}&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}

export default Mypage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;react-lifecycle&quot;&gt;React Lifecycle&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;constructor -&amp;gt; render -&amp;gt; componentDidMount -&amp;gt;
(setState/props 바뀔 때) -&amp;gt; ComponentDidUpdate -&amp;gt; render -&amp;gt;
(부모가 자식 component를 없앨 때 ) -&amp;gt; componentWillUmmount -&amp;gt; 소멸
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/lifecycle.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>SungSeokMin</name><email>jkl154527@gmail.com</email></author><category term="frontend" /><category term="React" /><summary type="html">React ?</summary></entry></feed>